-- Production Migration Script (PostgreSQL 15 Compatible)
-- This script migrates the schema from dev to production
-- Generated by comparing dev-schema.sql and prod-schema.sql on 2025-09-28

BEGIN;

-- 1. Create new tables that exist in dev but not in production

-- comp_basis table
CREATE TABLE IF NOT EXISTS public.comp_basis (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    profile_id uuid NOT NULL,
    address text NOT NULL,
    latitude text NOT NULL,
    longitude text NOT NULL,
    scan_id text NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    CONSTRAINT comp_basis_pkey PRIMARY KEY (id),
    CONSTRAINT comp_basis_scan_id_key UNIQUE (scan_id)
);

-- stripe_events table
CREATE TABLE IF NOT EXISTS public.stripe_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    stripe_event_id text NOT NULL,
    event_type text NOT NULL,
    processed bool DEFAULT false NULL,
    created_at timestamp DEFAULT now() NULL,
    "data" jsonb NULL,
    CONSTRAINT stripe_events_pkey PRIMARY KEY (id),
    CONSTRAINT stripe_events_stripe_event_id_key UNIQUE (stripe_event_id)
);

-- stripe_price_mappings table
CREATE TABLE IF NOT EXISTS public.stripe_price_mappings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    stripe_price_id text NOT NULL,
    billing_type text NOT NULL,
    listing_count int4 NOT NULL,
    tier text NOT NULL,
    amount_cents int4 NOT NULL,
    active bool DEFAULT true NOT NULL,
    CONSTRAINT stripe_price_mappings_pkey PRIMARY KEY (id),
    CONSTRAINT stripe_price_mappings_stripe_price_id_key UNIQUE (stripe_price_id)
);

-- comps table
CREATE TABLE IF NOT EXISTS public.comps (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    profile_id uuid NOT NULL,
    scan_id text NOT NULL,
    listing_id text NOT NULL,
    thirty_day int2 NULL,
    sixty_day int2 NULL,
    ninety_day int2 NULL,
    overall_occupancy int2 NULL,
    comp_basis_id uuid NULL,
    CONSTRAINT comps_pkey PRIMARY KEY (id)
);

-- comps_analysis table
CREATE TABLE IF NOT EXISTS public.comps_analysis (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    profile_id uuid NOT NULL,
    property_id uuid NOT NULL,
    summary jsonb NOT NULL,
    CONSTRAINT comps_analysis_pkey PRIMARY KEY (id)
);

-- market_spy_runs table
CREATE TABLE IF NOT EXISTS public.market_spy_runs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamptz DEFAULT now() NULL,
    updated_at timestamptz DEFAULT now() NULL,
    profile_id uuid NULL,
    scan_id varchar(255) NULL,
    address text NULL,
    geocode text NULL,
    started_at timestamptz NULL,
    completed_at timestamptz NULL,
    execution_time_ms int4 NULL,
    scraping_time_ms int4 NULL,
    assessment_time_ms int4 NULL,
    target_listings int4 NULL,
    listings_found int4 NULL,
    listings_assessed int4 NULL,
    status varchar(50) DEFAULT 'in_progress'::character varying NULL,
    error_message text NULL,
    form_data jsonb NULL,
    CONSTRAINT market_spy_runs_pkey PRIMARY KEY (id)
);

-- 2. Add missing columns to existing tables

-- Add new columns to profiles table
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS primary_email text,
ADD COLUMN IF NOT EXISTS secondary_email text,
ADD COLUMN IF NOT EXISTS primary_phone text,
ADD COLUMN IF NOT EXISTS secondary_phone text,
ADD COLUMN IF NOT EXISTS notification_preference text,
ADD COLUMN IF NOT EXISTS stripe_customer_id text,
ADD COLUMN IF NOT EXISTS stripe_subscription_id text,
ADD COLUMN IF NOT EXISTS subscription_status text,
ADD COLUMN IF NOT EXISTS subscription_quantity int4 DEFAULT 1,
ADD COLUMN IF NOT EXISTS market_spy_listings_limit int4 DEFAULT 0,
ADD COLUMN IF NOT EXISTS market_spy_listings_used int4 DEFAULT 0,
ADD COLUMN IF NOT EXISTS billing_type text DEFAULT 'subscription',
ADD COLUMN IF NOT EXISTS current_tier text DEFAULT 'starter',
ADD COLUMN IF NOT EXISTS listings_purchased int4 DEFAULT 0,
ADD COLUMN IF NOT EXISTS purchase_date timestamptz,
ADD COLUMN IF NOT EXISTS current_period_start timestamptz,
ADD COLUMN IF NOT EXISTS current_period_end timestamptz;

-- Add new columns to str_properties table
ALTER TABLE public.str_properties
ADD COLUMN IF NOT EXISTS is_comp bool DEFAULT false,
ADD COLUMN IF NOT EXISTS comp_id uuid,
ADD COLUMN IF NOT EXISTS bedrooms text,
ADD COLUMN IF NOT EXISTS pets text,
ADD COLUMN IF NOT EXISTS instant_book bool DEFAULT false,
ADD COLUMN IF NOT EXISTS cancellation_policy text,
ADD COLUMN IF NOT EXISTS review_count int4 DEFAULT 0,
ADD COLUMN IF NOT EXISTS average_rating numeric(3, 2) DEFAULT 0.0,
ADD COLUMN IF NOT EXISTS policies text,
ADD COLUMN IF NOT EXISTS updated_at timestamptz DEFAULT now();

-- 3. Add check constraints (without IF NOT EXISTS - check first)
DO $$
BEGIN
    -- Add stripe_price_mappings constraints
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'stripe_price_mappings_billing_type_check') THEN
        ALTER TABLE public.stripe_price_mappings
        ADD CONSTRAINT stripe_price_mappings_billing_type_check
        CHECK (billing_type = ANY (ARRAY['subscription'::text, 'one_time'::text]));
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'stripe_price_mappings_listing_count_check') THEN
        ALTER TABLE public.stripe_price_mappings
        ADD CONSTRAINT stripe_price_mappings_listing_count_check
        CHECK (listing_count > 0);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'stripe_price_mappings_tier_check') THEN
        ALTER TABLE public.stripe_price_mappings
        ADD CONSTRAINT stripe_price_mappings_tier_check
        CHECK (tier = ANY (ARRAY['starter'::text, 'growth'::text, 'pro'::text, 'portfolio'::text]));
    END IF;

    -- Add profiles constraints
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'profiles_billing_type_check') THEN
        ALTER TABLE public.profiles
        ADD CONSTRAINT profiles_billing_type_check
        CHECK (billing_type = ANY (ARRAY['subscription'::text, 'one_time'::text]));
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'profiles_current_tier_check') THEN
        ALTER TABLE public.profiles
        ADD CONSTRAINT profiles_current_tier_check
        CHECK (current_tier = ANY (ARRAY['starter'::text, 'growth'::text, 'pro'::text, 'portfolio'::text]));
    END IF;
END $$;

-- 4. Create indexes
CREATE INDEX IF NOT EXISTS idx_market_spy_runs_execution_time ON public.market_spy_runs USING btree (execution_time_ms);
CREATE INDEX IF NOT EXISTS idx_market_spy_runs_profile_id ON public.market_spy_runs USING btree (profile_id);
CREATE INDEX IF NOT EXISTS idx_market_spy_runs_scan_id ON public.market_spy_runs USING btree (scan_id);
CREATE INDEX IF NOT EXISTS idx_market_spy_runs_started_at ON public.market_spy_runs USING btree (started_at);
CREATE INDEX IF NOT EXISTS idx_profiles_billing_type ON public.profiles USING btree (billing_type);
CREATE INDEX IF NOT EXISTS idx_profiles_current_tier ON public.profiles USING btree (current_tier);
CREATE INDEX IF NOT EXISTS idx_profiles_market_spy_usage ON public.profiles USING btree (market_spy_listings_used, market_spy_listings_limit);
CREATE INDEX IF NOT EXISTS idx_profiles_plan_id ON public.profiles USING btree (plan_id);
CREATE INDEX IF NOT EXISTS idx_profiles_purchase_date ON public.profiles USING btree (purchase_date);
CREATE INDEX IF NOT EXISTS idx_profiles_stripe_subscription_id ON public.profiles USING btree (stripe_subscription_id);

-- 5. Create the update_updated_at_column function if it doesn't exist
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$function$;

-- 6. Create trigger for str_properties updated_at
DROP TRIGGER IF EXISTS update_str_properties_updated_at ON public.str_properties;
CREATE TRIGGER update_str_properties_updated_at
BEFORE UPDATE ON public.str_properties
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- 7. Add foreign key constraints (using DO blocks for PostgreSQL 15 compatibility)
DO $$
BEGIN
    -- comps foreign keys
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'comps_comp_basis_id_fkey') THEN
        ALTER TABLE public.comps
        ADD CONSTRAINT comps_comp_basis_id_fkey
        FOREIGN KEY (comp_basis_id) REFERENCES public.comp_basis(id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'comps_profile_id_fkey') THEN
        ALTER TABLE public.comps
        ADD CONSTRAINT comps_profile_id_fkey
        FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'comps_scan_id_fkey') THEN
        ALTER TABLE public.comps
        ADD CONSTRAINT comps_scan_id_fkey
        FOREIGN KEY (scan_id) REFERENCES public.comp_basis(scan_id);
    END IF;

    -- comps_analysis foreign keys
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'comps_analysis_profile_id_fkey') THEN
        ALTER TABLE public.comps_analysis
        ADD CONSTRAINT comps_analysis_profile_id_fkey
        FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'comps_analysis_property_id_fkey') THEN
        ALTER TABLE public.comps_analysis
        ADD CONSTRAINT comps_analysis_property_id_fkey
        FOREIGN KEY (property_id) REFERENCES public.str_properties(id);
    END IF;

    -- market_spy_runs foreign keys
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'market_spy_runs_profile_id_fkey') THEN
        ALTER TABLE public.market_spy_runs
        ADD CONSTRAINT market_spy_runs_profile_id_fkey
        FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
    END IF;

    -- profiles foreign keys
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'profiles_plan_id_fkey') THEN
        ALTER TABLE public.profiles
        ADD CONSTRAINT profiles_plan_id_fkey
        FOREIGN KEY (plan_id) REFERENCES public."plans"(id);
    END IF;

    -- str_properties foreign keys
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'str_properties_comp_id_fkey') THEN
        ALTER TABLE public.str_properties
        ADD CONSTRAINT str_properties_comp_id_fkey
        FOREIGN KEY (comp_id) REFERENCES public.comps(id);
    END IF;
END $$;

-- 8. Update default plan_id for profiles if needed
-- Note: You may need to adjust this UUID to match your actual freemium plan ID
UPDATE public.profiles
SET plan_id = (SELECT id FROM public."plans" WHERE "key" = 'freemium' LIMIT 1)
WHERE plan_id IS NULL;

COMMIT;

-- Verification queries (run these after the migration to verify)
-- SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = 'public';
-- SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;
-- SELECT column_name FROM information_schema.columns WHERE table_name = 'profiles' AND table_schema = 'public' ORDER BY ordinal_position;