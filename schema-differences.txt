--- prod-schema.sql	2025-09-28 17:15:29
+++ dev-schema.sql	2025-09-28 17:08:34
@@ -1,3 +1,23 @@
+-- public.comp_basis definition
+
+-- Drop table
+
+-- DROP TABLE public.comp_basis;
+
+CREATE TABLE public.comp_basis (
+	id uuid DEFAULT gen_random_uuid() NOT NULL,
+	created_at timestamptz DEFAULT now() NOT NULL,
+	profile_id uuid NOT NULL,
+	address text NOT NULL,
+	latitude text NOT NULL,
+	longitude text NOT NULL,
+	scan_id text NOT NULL,
+	status text DEFAULT 'pending'::text NOT NULL,
+	CONSTRAINT comp_basis_pkey PRIMARY KEY (id),
+	CONSTRAINT comp_basis_scan_id_key UNIQUE (scan_id)
+);
+
+
 -- public.features definition
 
 -- Drop table
@@ -53,6 +73,47 @@
 );
 
 
+-- public.stripe_events definition
+
+-- Drop table
+
+-- DROP TABLE public.stripe_events;
+
+CREATE TABLE public.stripe_events (
+	id uuid DEFAULT gen_random_uuid() NOT NULL,
+	stripe_event_id text NOT NULL,
+	event_type text NOT NULL,
+	processed bool DEFAULT false NULL,
+	created_at timestamp DEFAULT now() NULL,
+	"data" jsonb NULL,
+	CONSTRAINT stripe_events_pkey PRIMARY KEY (id),
+	CONSTRAINT stripe_events_stripe_event_id_key UNIQUE (stripe_event_id)
+);
+
+
+-- public.stripe_price_mappings definition
+
+-- Drop table
+
+-- DROP TABLE public.stripe_price_mappings;
+
+CREATE TABLE public.stripe_price_mappings (
+	id uuid DEFAULT gen_random_uuid() NOT NULL,
+	created_at timestamptz DEFAULT now() NOT NULL,
+	stripe_price_id text NOT NULL,
+	billing_type text NOT NULL,
+	listing_count int4 NOT NULL,
+	tier text NOT NULL,
+	amount_cents int4 NOT NULL,
+	active bool DEFAULT true NOT NULL,
+	CONSTRAINT stripe_price_mappings_billing_type_check CHECK ((billing_type = ANY (ARRAY['subscription'::text, 'one_time'::text]))),
+	CONSTRAINT stripe_price_mappings_listing_count_check CHECK ((listing_count > 0)),
+	CONSTRAINT stripe_price_mappings_pkey PRIMARY KEY (id),
+	CONSTRAINT stripe_price_mappings_stripe_price_id_key UNIQUE (stripe_price_id),
+	CONSTRAINT stripe_price_mappings_tier_check CHECK ((tier = ANY (ARRAY['starter'::text, 'growth'::text, 'pro'::text, 'portfolio'::text])))
+);
+
+
 -- public.plans_features_map definition
 
 -- Drop table
@@ -67,6 +128,43 @@
 	CONSTRAINT plans_features_map_pkey PRIMARY KEY (id),
 	CONSTRAINT plans_features_map_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.features(id),
 	CONSTRAINT plans_features_map_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public."plans"(id)
+);
+
+
+-- public.comps definition
+
+-- Drop table
+
+-- DROP TABLE public.comps;
+
+CREATE TABLE public.comps (
+	id uuid DEFAULT gen_random_uuid() NOT NULL,
+	created_at timestamptz DEFAULT now() NOT NULL,
+	profile_id uuid NOT NULL,
+	scan_id text NOT NULL,
+	listing_id text NOT NULL,
+	thirty_day int2 NULL,
+	sixty_day int2 NULL,
+	ninety_day int2 NULL,
+	overall_occupancy int2 NULL,
+	comp_basis_id uuid NULL,
+	CONSTRAINT comps_pkey PRIMARY KEY (id)
+);
+
+
+-- public.comps_analysis definition
+
+-- Drop table
+
+-- DROP TABLE public.comps_analysis;
+
+CREATE TABLE public.comps_analysis (
+	id uuid DEFAULT gen_random_uuid() NOT NULL,
+	created_at timestamptz DEFAULT now() NOT NULL,
+	profile_id uuid NOT NULL,
+	property_id uuid NOT NULL,
+	summary jsonb NOT NULL,
+	CONSTRAINT comps_analysis_pkey PRIMARY KEY (id)
 );
 
 
@@ -102,6 +200,39 @@
 );
 
 
+-- public.market_spy_runs definition
+
+-- Drop table
+
+-- DROP TABLE public.market_spy_runs;
+
+CREATE TABLE public.market_spy_runs (
+	id uuid DEFAULT gen_random_uuid() NOT NULL,
+	created_at timestamptz DEFAULT now() NULL,
+	updated_at timestamptz DEFAULT now() NULL,
+	profile_id uuid NULL,
+	scan_id varchar(255) NULL,
+	address text NULL,
+	geocode text NULL,
+	started_at timestamptz NULL,
+	completed_at timestamptz NULL,
+	execution_time_ms int4 NULL,
+	scraping_time_ms int4 NULL,
+	assessment_time_ms int4 NULL,
+	target_listings int4 NULL,
+	listings_found int4 NULL,
+	listings_assessed int4 NULL,
+	status varchar(50) DEFAULT 'in_progress'::character varying NULL,
+	error_message text NULL,
+	form_data jsonb NULL,
+	CONSTRAINT market_spy_runs_pkey PRIMARY KEY (id)
+);
+CREATE INDEX idx_market_spy_runs_execution_time ON public.market_spy_runs USING btree (execution_time_ms);
+CREATE INDEX idx_market_spy_runs_profile_id ON public.market_spy_runs USING btree (profile_id);
+CREATE INDEX idx_market_spy_runs_scan_id ON public.market_spy_runs USING btree (scan_id);
+CREATE INDEX idx_market_spy_runs_started_at ON public.market_spy_runs USING btree (started_at);
+
+
 -- public.profiles definition
 
 -- Drop table
@@ -115,10 +246,36 @@
 	full_name text NULL,
 	avatar_url text NULL,
 	website text NULL,
+	primary_email text NULL,
+	secondary_email text NULL,
+	primary_phone text NULL,
+	secondary_phone text NULL,
+	notification_preference text NULL,
+	plan_id uuid DEFAULT '5cb61d3c-306e-4518-8ec1-fa59585ce27c'::uuid NULL,
+	stripe_customer_id text NULL,
+	stripe_subscription_id text NULL,
+	subscription_status text NULL,
+	subscription_quantity int4 DEFAULT 1 NULL,
+	market_spy_listings_limit int4 DEFAULT 0 NULL,
+	market_spy_listings_used int4 DEFAULT 0 NULL,
+	billing_type text DEFAULT 'subscription'::text NULL,
+	current_tier text DEFAULT 'starter'::text NULL,
+	listings_purchased int4 DEFAULT 0 NULL,
+	purchase_date timestamptz NULL,
+	current_period_start timestamptz NULL,
+	current_period_end timestamptz NULL,
+	CONSTRAINT profiles_billing_type_check CHECK ((billing_type = ANY (ARRAY['subscription'::text, 'one_time'::text]))),
+	CONSTRAINT profiles_current_tier_check CHECK ((current_tier = ANY (ARRAY['starter'::text, 'growth'::text, 'pro'::text, 'portfolio'::text]))),
 	CONSTRAINT profiles_pkey PRIMARY KEY (id),
 	CONSTRAINT profiles_username_key UNIQUE (username),
 	CONSTRAINT username_length CHECK ((char_length(username) >= 3))
 );
+CREATE INDEX idx_profiles_billing_type ON public.profiles USING btree (billing_type);
+CREATE INDEX idx_profiles_current_tier ON public.profiles USING btree (current_tier);
+CREATE INDEX idx_profiles_market_spy_usage ON public.profiles USING btree (market_spy_listings_used, market_spy_listings_limit);
+CREATE INDEX idx_profiles_plan_id ON public.profiles USING btree (plan_id);
+CREATE INDEX idx_profiles_purchase_date ON public.profiles USING btree (purchase_date);
+CREATE INDEX idx_profiles_stripe_subscription_id ON public.profiles USING btree (stripe_subscription_id);
 
 
 -- public.properties definition
@@ -217,11 +374,28 @@
 	amenities json NULL,
 	hero_image_link text NULL,
 	other_image_links jsonb NULL,
+	is_comp bool DEFAULT false NULL,
+	comp_id uuid NULL,
+	bedrooms text NULL,
+	pets text NULL,
+	instant_book bool DEFAULT false NULL,
+	cancellation_policy text NULL,
+	review_count int4 DEFAULT 0 NULL,
+	average_rating numeric(3, 2) DEFAULT 0.0 NULL,
+	policies text NULL,
+	updated_at timestamptz DEFAULT now() NULL,
 	CONSTRAINT str_properties_external_id_key UNIQUE (external_id),
 	CONSTRAINT str_properties_pkey PRIMARY KEY (id)
 );
 
+-- Table Triggers
 
+create trigger update_str_properties_updated_at before
+update
+    on
+    public.str_properties for each row execute function update_updated_at_column();
+
+
 -- public.str_property_ratings definition
 
 -- Drop table
@@ -255,6 +429,19 @@
 );
 
 
+-- public.comps foreign keys
+
+ALTER TABLE public.comps ADD CONSTRAINT comps_comp_basis_id_fkey FOREIGN KEY (comp_basis_id) REFERENCES public.comp_basis(id);
+ALTER TABLE public.comps ADD CONSTRAINT comps_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
+ALTER TABLE public.comps ADD CONSTRAINT comps_scan_id_fkey FOREIGN KEY (scan_id) REFERENCES public.comp_basis(scan_id);
+
+
+-- public.comps_analysis foreign keys
+
+ALTER TABLE public.comps_analysis ADD CONSTRAINT comps_analysis_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
+ALTER TABLE public.comps_analysis ADD CONSTRAINT comps_analysis_property_id_fkey FOREIGN KEY (property_id) REFERENCES public.str_properties(id);
+
+
 -- public.listing_feedback_usage foreign keys
 
 ALTER TABLE public.listing_feedback_usage ADD CONSTRAINT listing_feedback_usage_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
@@ -267,9 +454,15 @@
 ALTER TABLE public.listings ADD CONSTRAINT listings_property_id_fkey FOREIGN KEY (property_id) REFERENCES public.properties(id);
 
 
+-- public.market_spy_runs foreign keys
+
+ALTER TABLE public.market_spy_runs ADD CONSTRAINT market_spy_runs_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
+
+
 -- public.profiles foreign keys
 
 ALTER TABLE public.profiles ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id);
+ALTER TABLE public.profiles ADD CONSTRAINT profiles_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public."plans"(id);
 
 
 -- public.properties foreign keys
@@ -297,6 +490,7 @@
 
 -- public.str_properties foreign keys
 
+ALTER TABLE public.str_properties ADD CONSTRAINT str_properties_comp_id_fkey FOREIGN KEY (comp_id) REFERENCES public.comps(id);
 ALTER TABLE public.str_properties ADD CONSTRAINT str_properties_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id);
 
 
